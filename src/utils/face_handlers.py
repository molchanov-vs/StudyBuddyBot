from io import BytesIO
from typing import Optional, Tuple

import face_recognition


async def analyze_face_in_image(bot, file_id: str) -> Tuple[bool, Optional[str], Optional[float]]:
    """
    Analyzes a photo for face detection and quality.
    
    Returns:
        Tuple[bool, Optional[str], Optional[float]]: 
        - success: bool - whether the photo is suitable
        - error_message: Optional[str] - error message if photo is not suitable
        - face_ratio: Optional[float] - face to image ratio if photo is suitable
    """
    buf = BytesIO()
    
    try:
        await bot.download(file=file_id, destination=buf)
        buf.seek(0)
        
        image = face_recognition.load_image_file(buf)
        h, w = image.shape[:2]
        img_area = h * w

        face_locations = face_recognition.face_locations(image)
        
        if len(face_locations) == 0:
            return False, 'üòï –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ç–æ, –≥–¥–µ –ª–∏—Ü–æ –≤–∏–¥–Ω–æ –ª—É—á—à–µ.', None

        if len(face_locations) > 1:
            return False, 'üòï –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ç–æ, –≥–¥–µ –ª–∏—Ü–æ –≤–∏–¥–Ω–æ –ª—É—á—à–µ.', None

        (top, right, bottom, left) = face_locations[0]
        face_area = (right - left) * (bottom - top)
        
        if img_area == 0:
            return False, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.', None
            
        face_ratio = face_area / img_area
        
        if face_ratio <= 0.15:
            return False, '‚ö†Ô∏è –õ–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ (–º–µ–Ω–µ–µ 15% –∫–∞–¥—Ä–∞). –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, –≥–¥–µ –ª–∏—Ü–æ –∫—Ä—É–ø–Ω–µ–µ.', None

        return True, None, face_ratio
        
    except Exception as e:
        return False, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}', None
