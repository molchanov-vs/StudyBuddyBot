from typing import TYPE_CHECKING, Literal

import os
import re

from aiogram import Bot
from aiogram.types import User
from aiogram.fsm.state import State
from aiogram_dialog import DialogManager

from my_tools import DialogManagerKeys

from ..custom_types import UserData
from ..config import Config

from fluentogram import TranslatorRunner

if TYPE_CHECKING:
    from ..locales.stub import TranslatorRunner


AFTER_MESSAGES = messages = [
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã üôå –°–µ–π—á–∞—Å –º—ã –æ—Ñ–æ—Ä–º–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–º –∑–Ω–∞—Ç—å!",
    "–ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –°–µ–π—á–∞—Å —Å–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é –≥–∞–ª–µ—Ä–µ—é, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –µ—ë –æ–ø—É–±–ª–∏–∫—É–µ–º ‚Äî —è —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à—É —Ç–µ–±–µ!",
    "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã üåø –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥–∞–ª–µ—Ä–µ–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞, —è –ø–æ–¥–µ–ª—é—Å—å —Å—Å—ã–ª–∫–æ–π.",
    "–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —É–∂–µ —É –Ω–∞—Å üëå –°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–∞–ª–µ—Ä–µ–∏. –ß—É—Ç—å –ø–æ–∑–∂–µ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.",
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è. –ú—ã —É–∂–µ —Å–æ–±–∏—Ä–∞–µ–º –≥–∞–ª–µ—Ä–µ—é, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –µ—ë –¥–æ–¥–µ–ª–∞–µ–º, —è —Å—Ä–∞–∑—É —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π!"
]



def markdown_to_html(text: str) -> str:
    """
    Converts simplified Markdown-style formatting to Telegram HTML.
    Supports: **bold**, *italic*, _italic_, `code`, ```pre```.
    """
    # Bold: **text**
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text, flags=re.DOTALL)
    
    # Italic: *text* or _text_ (avoid matching inside bold)
    text = re.sub(r'(?<!\*)\*(?!\*)(.+?)(?<!\*)\*(?!\*)', r'<i>\1</i>', text, flags=re.DOTALL)
    text = re.sub(r'(?<!_)_(?!_)(.+?)(?<!_)_(?!_)', r'<i>\1</i>', text, flags=re.DOTALL)
    
    # Inline code: `code`
    text = re.sub(r'`([^`\n]+?)`', r'<code>\1</code>', text)
    
    # Preformatted block (optional)
    # text = re.sub(r'```(.+?)```', r'<pre>\1</pre>', text, flags=re.DOTALL)

    return text


def get_middleware_data(dialog_manager: DialogManager) -> tuple[Bot, Config, UserData]:

    bot: Bot = dialog_manager.middleware_data[DialogManagerKeys.BOT]
    config: Config = dialog_manager.middleware_data.get(DialogManagerKeys.CONFIG)
    event_from_user: User = dialog_manager.middleware_data.get(DialogManagerKeys.EVENT_FROM_USER)
    user_data: UserData = UserData(**event_from_user.model_dump())

    return bot, config, user_data


def get_current_state(dialog_manager: DialogManager) -> State:

    return dialog_manager.current_context().state


def remove_logs():
    
    logs = sorted(os.listdir('logs'))

    if len(logs) > 5:
        for log in logs[:-1]:
            os.remove(f"logs/{log}")


def load_locales(
    i18n: TranslatorRunner,
    dialog_manager: DialogManager
    ) -> dict[str, str]:

    want: str = dialog_manager.dialog_data.get("gender", "unknown")

    want = "—Ö–æ—Ç–µ–ª" if want == "male" else "—Ö–æ—Ç–µ–ª–∞" if want == "female" else "—Ö–æ—Ç–µ–ª(–∞)"

    return {
        "back_btn": i18n.service.back_btn(),
        "next_btn": i18n.service.next_btn(),
        "welcome": i18n.onboarding.welcome(),
        "super_btn": i18n.onboarding.super_btn(),
        "preonboarding": i18n.onboarding.preonboarding(),
        "approve_btn": i18n.onboarding.approve_btn(),
        "disapprove_btn": i18n.onboarding.disapprove_btn(),
        "name": i18n.onboarding.name(),
        "important_today": i18n.onboarding.important_today(),
        "difficult_today": i18n.onboarding.difficult_today(),
        "something_else": i18n.onboarding.something_else(),
        "to_profile_btn": i18n.onboarding.to_profile_btn(),
        "no_photo": i18n.onboarding.no_photo(),
        "yes_photo": i18n.onboarding.yes_photo(),
        "yes_btn": i18n.onboarding.yes_btn(),
        "step_1": i18n.onboarding.step_1(),
        "background": i18n.onboarding.background(),
        "after_step_1": i18n.onboarding.after_step_1(),
        "step_2": i18n.onboarding.step_2(),
        "after_step_2": i18n.onboarding.after_step_2(),
        "step_3": i18n.onboarding.step_3(),
        "step_4": i18n.onboarding.step_4(want=want),
        "after_step_4": i18n.onboarding.after_step_4(),
        "step_5": i18n.onboarding.step_5(),
        "step_6": i18n.onboarding.step_6(),
        "thanks_btn": i18n.onboarding.thanks_btn(),
    }


def determine_russian_name_gender(full_name: str) -> Literal["male", "female", "unknown"]:
    """
    Determine the gender of a Russian name by analyzing both first name and surname.
    
    Args:
        full_name: Full name in format "FirstName LastName" (e.g., "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤" or "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞")
    
    Returns:
        "male", "female", or "unknown" if gender cannot be determined
    """
    if not full_name or not isinstance(full_name, str):
        return "unknown"
    
    words = full_name.strip().split()
    if len(words) != 2:
        return "unknown"
    
    first_name, surname = words[0].lower(), words[1].lower()
    
    # Male first names (common Russian male names)
    male_names = {
        '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–∞–ª–µ–∫—Å–µ–π', '–∞–Ω–¥—Ä–µ–π', '–∞—Ä—Ç—ë–º', '–∞—Ä—Ç–µ–º', '–≤–ª–∞–¥–∏–º–∏—Ä', '–≤–ª–∞–¥–∏—Å–ª–∞–≤',
        '–¥–º–∏—Ç—Ä–∏–π', '–µ–≤–≥–µ–Ω–∏–π', '–∏–≤–∞–Ω', '–∏–≥–æ—Ä—å', '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–º–∞–∫—Å–∏–º', '–º–∏—Ö–∞–∏–ª',
        '–Ω–∏–∫–æ–ª–∞–π', '–ø–∞–≤–µ–ª', '–ø–µ—Ç—Ä', '–ø—ë—Ç—Ä', '—Å–µ—Ä–≥–µ–π', '—Å—Ç–∞–Ω–∏—Å–ª–∞–≤', '—Å—Ç–µ–ø–∞–Ω', '—Å—Ç–µ—Ñ–∞–Ω',
        '—Ç–∏–º–æ—Ñ–µ–π', '—Ñ—ë–¥–æ—Ä', '—Ñ–µ–¥–æ—Ä', '—é—Ä–∏–π', '—è—Ä–æ—Å–ª–∞–≤', '–∞–Ω—Ç–æ–Ω', '–≤–∞—Å–∏–ª–∏–π', '–≤–∏–∫—Ç–æ—Ä',
        '–≥—Ä–∏–≥–æ—Ä–∏–π', '–¥–∞–Ω–∏–∏–ª', '–¥–∞–Ω–∏–ª', '–¥–µ–Ω–∏—Å', '–µ–≥–æ—Ä', '–∫–∏—Ä–∏–ª–ª', '–ª–µ–æ–Ω–∏–¥', '–º–∞—Ç–≤–µ–π',
        '–Ω–∞–∑–∞—Ä', '–æ–ª–µ–≥', '—Ä–æ–º–∞–Ω', '—Å–≤—è—Ç–æ—Å–ª–∞–≤', '—Å–µ–º—ë–Ω', '—Å–µ–º–µ–Ω', '—Ç–∏–º—É—Ä', '—Ñ–∏–ª–∏–ø–ø',
        '—ç–¥—É–∞—Ä–¥', '—è–∫–æ–≤', '–∞—Ä—Å–µ–Ω–∏–π', '–±–æ–≥–¥–∞–Ω', '–≤–∞–ª–µ–Ω—Ç–∏–Ω', '–≤–∞–ª–µ—Ä–∏–π', '–≤—Å–µ–≤–æ–ª–æ–¥',
        '–≥–µ–æ—Ä–≥–∏–π', '–≥–µ—Ä–º–∞–Ω', '–≥–ª–µ–±', '–¥–∞–≤–∏–¥', '–¥–µ–º—å—è–Ω', '–∑–∞—Ö–∞—Ä', '–∏–ª—å—è', '–∏–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π',
        '–∫–∞—Ä–ª', '–ª–µ–æ–Ω—Ç–∏–π', '–ª—É–∫–∞', '–º–∞—Ä–∫', '–º–∏—Ä–æ–Ω', '–Ω–µ—Å—Ç–æ—Ä', '–ø–æ—Ä—Ñ–∏—Ä–∏–π', '–ø—Ä–æ—Ö–æ—Ä',
        '—Ä–∞—Ñ–∞–∏–ª', '—Å–∞–≤–≤–∞', '—Å–∞–≤–µ–ª–∏–π', '—Å–∞–º—Å–æ–Ω', '—Å–µ–≤–∞—Å—Ç—å—è–Ω', '—Å–∏–¥–æ—Ä', '—Å–∏–ª–∞',
        '—Å–∏–ª—å–≤–µ—Å—Ç—Ä', '—Å–ø–∏—Ä–∏–¥–æ–Ω', '—Ç—Ä–æ—Ñ–∏–º', '—É—Å—Ç–∏–Ω', '—Ñ–æ–º–∞', '—ç–º–º–∞–Ω—É–∏–ª', '—ç—Ä–∞—Å—Ç'
    }
    
    # Female first names (common Russian female names)
    female_names = {
        '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–∞–ª—ë–Ω–∞', '–∞–ª–µ–Ω–∞', '–∞–ª–∏–Ω–∞', '–∞–ª–ª–∞', '–∞–Ω–Ω–∞', '–∞–Ω–≥–µ–ª–∏–Ω–∞',
        '–∞–Ω–∂–µ–ª–∞', '–∞–Ω–∂–µ–ª–∏–∫–∞', '–∞–Ω—Ç–æ–Ω–∏–Ω–∞', '–≤–∞–ª–µ–Ω—Ç–∏–Ω–∞', '–≤–∞–ª–µ—Ä–∏—è', '–≤–∞—Ä–≤–∞—Ä–∞',
        '–≤–µ—Ä–∞', '–≤–µ—Ä–æ–Ω–∏–∫–∞', '–≤–∏–∫—Ç–æ—Ä–∏—è', '–≥–∞–ª–∏–Ω–∞', '–¥–∞—Ä—å—è', '–¥–∏–∞–Ω–∞', '–µ–≤–≥–µ–Ω–∏—è',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–µ–ª–µ–Ω–∞', '–µ–ª–∏–∑–∞–≤–µ—Ç–∞', '–µ–ª–∏–∑–∞–≤–µ—Ç–∞', '–∂–∞–Ω–Ω–∞', '–∑–∏–Ω–∞–∏–¥–∞',
        '–∑–æ—è', '–∏–Ω–Ω–∞', '–∏—Ä–∏–Ω–∞', '–∫–∞—Ä–∏–Ω–∞', '–∫–∏—Ä–∞', '–∫–ª–∞–≤–¥–∏—è', '–∫—Å–µ–Ω–∏—è', '–ª–∞—Ä–∏—Å–∞',
        '–ª–∏–¥–∏—è', '–ª—é–±–æ–≤—å', '–ª—é–¥–º–∏–ª–∞', '–º–∞—Ä–∏–Ω–∞', '–º–∞—Ä–∏—è', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–Ω–∞–¥–µ–∂–¥–∞',
        '–Ω–∞—Ç–∞–ª—å—è', '–Ω–∞—Ç–∞–ª–∏—è', '–Ω–∏–Ω–∞', '–æ–∫—Å–∞–Ω–∞', '–æ–ª—å–≥–∞', '–ø–æ–ª–∏–Ω–∞', '—Ä–∞–∏—Å–∞',
        '—Ä–µ–≥–∏–Ω–∞', '—Ä–∏–º–º–∞', '—Å–≤–µ—Ç–ª–∞–Ω–∞', '—Å–æ—Ñ—å—è', '—Å–æ—Ñ–∏—è', '—Ç–∞–º–∞—Ä–∞', '—Ç–∞—Ç—å—è–Ω–∞',
        '—É–ª—å—è–Ω–∞', '—é–ª–∏—è', '—è–Ω–∞', '–∞–Ω–∂–µ–ª–∏–∫–∞', '–∞–Ω—Ç–æ–Ω–∏–Ω–∞', '–≤–∞—Å–∏–ª–∏—Å–∞', '–≤–µ—Ä–∞',
        '–≤–µ—Ä–æ–Ω–∏–∫–∞', '–≥–∞–ª–∏–Ω–∞', '–¥–∞—Ä—å—è', '–¥–∏–∞–Ω–∞', '–µ–≤–¥–æ–∫–∏—è', '–µ–≤—Ñ—Ä–æ—Å–∏–Ω–∏—è',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–µ–ª–µ–Ω–∞', '–µ–ª–∏–∑–∞–≤–µ—Ç–∞', '–µ—Ñ—Ä–æ—Å–∏–Ω—å—è', '–∂–∞–Ω–Ω–∞', '–∑–∏–Ω–∞–∏–¥–∞',
        '–∑–æ—è', '–∏–Ω–Ω–∞', '–∏—Ä–∏–Ω–∞', '–∫–∞—Ä–∏–Ω–∞', '–∫–∏—Ä–∞', '–∫–ª–∞–≤–¥–∏—è', '–∫—Å–µ–Ω–∏—è', '–ª–∞—Ä–∏—Å–∞',
        '–ª–∏–¥–∏—è', '–ª—é–±–æ–≤—å', '–ª—é–¥–º–∏–ª–∞', '–º–∞—Ä–∏–Ω–∞', '–º–∞—Ä–∏—è', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–Ω–∞–¥–µ–∂–¥–∞',
        '–Ω–∞—Ç–∞–ª—å—è', '–Ω–∏–Ω–∞', '–æ–∫—Å–∞–Ω–∞', '–æ–ª—å–≥–∞', '–ø–æ–ª–∏–Ω–∞', '—Ä–∞–∏—Å–∞', '—Ä–µ–≥–∏–Ω–∞',
        '—Ä–∏–º–º–∞', '—Å–≤–µ—Ç–ª–∞–Ω–∞', '—Å–æ—Ñ—å—è', '—Å–æ—Ñ–∏—è', '—Ç–∞–º–∞—Ä–∞', '—Ç–∞—Ç—å—è–Ω–∞', '—É–ª—å—è–Ω–∞',
        '—é–ª–∏—è', '—è–Ω–∞', '–∞–Ω–≥–µ–ª–∏–Ω–∞', '–∞–Ω–∂–µ–ª–∞', '–∞–Ω–∂–µ–ª–∏–∫–∞', '–∞–Ω—Ç–æ–Ω–∏–Ω–∞', '–≤–∞—Å–∏–ª–∏—Å–∞',
        '–≤–µ—Ä–∞', '–≤–µ—Ä–æ–Ω–∏–∫–∞', '–≥–∞–ª–∏–Ω–∞', '–¥–∞—Ä—å—è', '–¥–∏–∞–Ω–∞', '–µ–≤–¥–æ–∫–∏—è', '–µ–≤—Ñ—Ä–æ—Å–∏–Ω–∏—è',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–µ–ª–µ–Ω–∞', '–µ–ª–∏–∑–∞–≤–µ—Ç–∞', '–µ—Ñ—Ä–æ—Å–∏–Ω—å—è', '–∂–∞–Ω–Ω–∞', '–∑–∏–Ω–∞–∏–¥–∞',
        '–∑–æ—è', '–∏–Ω–Ω–∞', '–∏—Ä–∏–Ω–∞', '–∫–∞—Ä–∏–Ω–∞', '–∫–∏—Ä–∞', '–∫–ª–∞–≤–¥–∏—è', '–∫—Å–µ–Ω–∏—è', '–ª–∞—Ä–∏—Å–∞',
        '–ª–∏–¥–∏—è', '–ª—é–±–æ–≤—å', '–ª—é–¥–º–∏–ª–∞', '–º–∞—Ä–∏–Ω–∞', '–º–∞—Ä–∏—è', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–Ω–∞–¥–µ–∂–¥–∞',
        '–Ω–∞—Ç–∞–ª—å—è', '–Ω–∏–Ω–∞', '–æ–∫—Å–∞–Ω–∞', '–æ–ª—å–≥–∞', '–ø–æ–ª–∏–Ω–∞', '—Ä–∞–∏—Å–∞', '—Ä–µ–≥–∏–Ω–∞',
        '—Ä–∏–º–º–∞', '—Å–≤–µ—Ç–ª–∞–Ω–∞', '—Å–æ—Ñ—å—è', '—Å–æ—Ñ–∏—è', '—Ç–∞–º–∞—Ä–∞', '—Ç–∞—Ç—å—è–Ω–∞', '—É–ª—å—è–Ω–∞',
        '—é–ª–∏—è', '—è–Ω–∞'
    }
    
    # Check first name first (most reliable indicator)
    if first_name in male_names:
        return "male"
    elif first_name in female_names:
        return "female"
    
    # If first name is not in our lists, check surname endings
    # Male surname endings
    male_endings = ['–æ–≤', '–µ–≤', '–∏–Ω', '—ã–Ω', '–æ–π', '–∏–π', '–æ–π', '—Å–∫–∏–π', '—Ü–∫–∏–π', '—Å–∫–æ–π', '—Ü–∫–æ–π']
    # Female surname endings (same as male but with '–∞' at the end)
    female_endings = ['–æ–≤–∞', '–µ–≤–∞', '–∏–Ω–∞', '—ã–Ω–∞', '–∞—è', '–∞—è', '–∞—è', '—Å–∫–∞—è', '—Ü–∫–∞—è', '—Å–∫–∞—è', '—Ü–∫–∞—è']
    
    # Check surname endings
    for ending in male_endings:
        if surname.endswith(ending):
            return "male"
    
    for ending in female_endings:
        if surname.endswith(ending):
            return "female"
    
    # Additional checks for common patterns
    # Names ending with '–∞' are often female
    if first_name.endswith('–∞') and not first_name.endswith('–∏—è'):
        return "female"
    
    # Names ending with '–π' are often male
    if first_name.endswith('–π'):
        return "male"
    
    # Names ending with '—å' can be either, but often male
    if first_name.endswith('—å'):
        return "male"
    
    return "unknown"